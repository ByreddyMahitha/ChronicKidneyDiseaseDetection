print("Specificity: 0%")
TestDataSVMRadial <- TestDataFactored
TestDataSVMRadial$CKD <- predict(SVM_radial, newdata = TestDataSVMRadial)
write.csv(TestDataSVMRadial, file = "SVM_Radial.csv", row.names = F, quote = F)
##POLYNOMIAL KERNEL
obj_polynomial <- best.tune(svm, CKD~., data = training, kernel = "polynomial")
obj_polynomial
SVM_polynomial <- svm(CKD~., data = training, kernel = "polynomial", gamma = 0.02564103, cost = 1, degree = 3, coef.0 = 0)
predVector3 <- predict(SVM_polynomial, newdata = testing)
table3 <- table(predVector3, testing$CKD)
confusionMatrix(table3, positive = "No")
print("Support Vector Machines (polynomial) results:")
print("Accuracy: 93.6%")
print("Sensitivity: 100%")
print("Specificity: 0%")
TestDataSVMPolynomial <- TestDataFactored
TestDataSVMPolynomial$CKD <- predict(SVM_polynomial, newdata = TestDataSVMPolynomial)
write.csv(TestDataSVMPolynomial, file = "SVM_Polynomial.csv", row.names = F, quote = F)
##SIGMOID KERNEL
obj_sigmoid <- best.tune(svm, CKD~., data = training, kernel = "sigmoid")
obj_sigmoid
SVM_sigmoid <- svm(CKD~., data = training, kernel = "sigmoid", gamma = 0.02564103, cost = 1, coef.0 = 0)
predVector4 <- predict(SVM_sigmoid, newdata = testing)
table4 <- table(predVector4, testing$CKD)
confusionMatrix(table4, positive = "No")
print("Support Vector Machines (sigmoid) results:")
print("Accuracy: 91.5%")
print("Sensitivity: 97.1%")
print("Specificity: 10.6%")
TestDataSVMSigmoid <- TestDataFactored
TestDataSVMSigmoid$CKD <- predict(SVM_sigmoid, newdata = TestDataSVMSigmoid)
write.csv(TestDataSVMSigmoid, file = "SVM_Sigmoid.csv", row.names = F, quote = F)
runApp()
set.seed(0305)
ModelDataNum <- as.data.frame(sapply(ModelDataFactored, as.numeric))
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataNum[index,]
testing <- ModelDataNum[-index,]
n <- names(training)
names <- paste(n[1:32], collapse = ' + ')
f <- paste("CKD ~ ", names)
nn <- neuralnet(f, training, hidden = 2, threshold = 0.03, stepmax = 5e+07, learningrate = 0.05, lifesign = "full")
plot(nn)
nn.results <- compute(nn, testing[-33])
predVector <- (nn.results$net.result < 1.5)
table <- table(Predicted = (predVector), Actual = (testing$CKD == 1))
table
print("Neural Network results:")
print("Sensitivity: 100%")
print("Specificity: 0%")
TestDataNN <- TestDataFactored
TestDataNN <- as.data.frame(sapply(TestDataNN, as.numeric))
nn.predNew <- compute(nn, TestDataNN)
TestDataNN <- round(nn.predNew$net.result)
write.csv(TestDataNN, file = "NeuralNet.csv", row.names = F, quote = F)
TestDataNN <- NULL
testing <- NULL
training <- NULL
runApp()
runApp()
set.seed(0305)
ModelDataNum <- as.data.frame(sapply(ModelDataFactored, as.numeric))
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataNum[index,]
testing <- ModelDataNum[-index,]
n <- names(training)
names <- paste(n[1:32], collapse = ' + ')
f <- paste("CKD ~ ", names)
nn <- neuralnet(f, training, hidden = 2, threshold = 0.03, stepmax = 5e+07, learningrate = 0.05, lifesign = "full")
plot(nn)
nn.results <- compute(nn, testing[-33])
predVector <- (nn.results$net.result < 1.5)
table <- table(Predicted = (predVector), Actual = (testing$CKD == 1))
table
print("Neural Network results:")
print("Sensitivity: 100%")
print("Specificity: 0%")
TestDataNN <- TestDataFactored
TestDataNN <- as.data.frame(sapply(TestDataNN, as.numeric))
nn.predNew <- compute(nn, TestDataNN)
TestDataNN <- round(nn.predNew$net.result)
write.csv(TestDataNN, file = "NeuralNet.csv", row.names = F, quote = F)
wnn<-read.csv(file="NeuralNet.csv",head=TRUE)
matplot(wnn[, 1], wnn[, -1], type="h",xlab="all attributes",ylab="CKD",main="distribution of NeuralNet set")
TestDataNN <- TestDataFactored
TestDataNN <- as.data.frame(sapply(TestDataNN, as.numeric))
nn.predNew <- compute(nn, TestDataNN)
TestDataNN <- round(nn.predNew$net.result)
write.csv(TestDataNN, file = "NeuralNet.csv", row.names = T, quote = F)
wnn<-read.csv(file="NeuralNet.csv",head=TRUE)
matplot(wnn[, 1], wnn[, -1], type="h",xlab="all attributes",ylab="CKD",main="distribution of NeuralNet set")
TestDataNN <- NULL
testing <- NULL
training <- NULL
runApp()
runApp()
?plot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
set.seed(0305)
ModelDataNum <- as.data.frame(sapply(ModelDataFactored, as.numeric))
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataNum[index,]
testing <- ModelDataNum[-index,]
n <- names(training)
names <- paste(n[1:32], collapse = ' + ')
f <- paste("CKD ~ ", names)
nn <- neuralnet(f, training, hidden = 2, threshold = 0.03, stepmax = 5e+07, learningrate = 0.05, lifesign = "full")
plot(nn)
nn.results <- compute(nn, testing[-33])
predVector <- (nn.results$net.result < 1.5)
table <- table(Predicted = (predVector), Actual = (testing$CKD == 1))
table
print("Neural Network results:")
print("Sensitivity: 100%")
print("Specificity: 0%")
TestDataNN <- TestDataFactored
TestDataNN <- as.data.frame(sapply(TestDataNN, as.numeric))
nn.predNew <- compute(nn, TestDataNN)
TestDataNN <- round(nn.predNew$net.result)
write.csv(TestDataNN, file = "NeuralNet.csv", row.names = T, quote = F)
TestDataNN <- NULL
testing <- NULL
training <- NULL
Animals<-read.csv(file="NeuralNet.csv",head=TRUE)
ggplot(Animals, aes(factor(Female), CKD, fill = Category)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
testing <- NULL
training <- NULL
Animals<-read.csv(file="NeuralNet.csv",head=TRUE)
ggplot(Animals, aes(factor(ModelDataFactored$Age), CKD, fill = Category)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
testing <- NULL
training <- NULL
Animals<-read.csv(file="NeuralNet.csv",head=TRUE)
ggplot(Animals, aes(factor(ModelDataFactored$Age), ModelDataFactored$CKD, fill = Category)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
TestDataNN <- NULL
testing <- NULL
training <- NULL
Animals<-read.csv(file="NeuralNet.csv",head=TRUE)
ggplot(Animals, aes(factor(ModelDataFactored$Age), ModelDataFactored$CKD)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
ggplot(Animals, aes(factor(nn), ModelDataFactored$CKD)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
write.csv(TestDataNN, file = "NeuralNet.csv", row.names = T, quote = F)
TestDataNN <- NULL
testing <- NULL
training <- NULL
Animals<-read.csv(file="NeuralNet.csv",head=TRUE)
set.seed(0305)
ModelDataNum <- as.data.frame(sapply(ModelDataFactored, as.numeric))
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataNum[index,]
testing <- ModelDataNum[-index,]
n <- names(training)
names <- paste(n[1:32], collapse = ' + ')
f <- paste("CKD ~ ", names)
nn <- neuralnet(f, training, hidden = 2, threshold = 0.03, stepmax = 5e+07, learningrate = 0.05, lifesign = "full")
plot(nn)
nn.results <- compute(nn, testing[-33])
predVector <- (nn.results$net.result < 1.5)
table <- table(Predicted = (predVector), Actual = (testing$CKD == 1))
table
print("Neural Network results:")
print("Sensitivity: 100%")
print("Specificity: 0%")
TestDataNN <- TestDataFactored
TestDataNN <- as.data.frame(sapply(TestDataNN, as.numeric))
nn.predNew <- compute(nn, TestDataNN)
TestDataNN <- round(nn.predNew$net.result)
write.csv(TestDataNN, file = "NeuralNet.csv", row.names = T, quote = F)
TestDataNN <- NULL
testing <- NULL
training <- NULL
Animals<-read.csv(file="NeuralNet.csv",head=TRUE)
ggplot(Animals, aes(factor(nn), ModelDataFactored$CKD)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
set.seed(0305)
ModelDataNum <- as.data.frame(sapply(ModelDataFactored, as.numeric))
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataNum[index,]
testing <- ModelDataNum[-index,]
n <- names(training)
names <- paste(n[1:32], collapse = ' + ')
f <- paste("CKD ~ ", names)
nn <- neuralnet(f, training, hidden = 2, threshold = 0.03, stepmax = 5e+07, learningrate = 0.05, lifesign = "full")
plot(nn)
nn.results <- compute(nn, testing[-33])
predVector <- (nn.results$net.result < 1.5)
table <- table(Predicted = (predVector), Actual = (testing$CKD == 1))
table
print("Neural Network results:")
print("Sensitivity: 100%")
print("Specificity: 0%")
TestDataNN <- TestDataFactored
TestDataNN <- as.data.frame(sapply(TestDataNN, as.numeric))
nn.predNew <- compute(nn, TestDataNN)
TestDataNN <- round(nn.predNew$net.result)
write.csv(TestDataNN, file = "NeuralNet.csv", row.names = T, quote = F)
TestDataNN <- NULL
testing <- NULL
training <- NULL
TestDataNN <- NULL
testing <- NULL
training <- NULL
Animals<-read.table(file="NeuralNet.csv",head=TRUE)
ggplot(Animals, aes(factor(nn), ModelDataFactored$CKD)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
training <- NULL
Animals<-read.table(file="NeuralNet.csv",head=TRUE)
ggplot(Animals, aes(factor(ModelDataFactored$CKD), ModelDataFactored$CKD)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
testing <- NULL
training <- NULL
Animals<-read.table(file="NeuralNet.csv",head=TRUE)
Animals
shiny::runApp()
install.packages("caret")
install.packages("caret")
install.packages("caTools")
install.packages("ROCR")
install.packages("class")
install.packages("MASS")
install.packages("MASS")
install.packages("e1071")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("party")
install.packages("kernlab")
install.packages("neuralnet")
install.packages("neuralnet")
library(caret)
library(caTools)
library(ROCR)
library(class)
library(MASS)
library(e1071)
library(rpart)
library(rpart.plot)
library(party)
library(kernlab)
library(neuralnet)
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("caret")
install.packages("caret")
install.packages("caTools")
install.packages("caTools")
install.packages("ROCR")
install.packages("ROCR")
install.packages("class")
install.packages("MASS")
install.packages("MASS")
install.packages("e1071")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("party")
install.packages("kernlab")
install.packages("neuralnet")
install.packages("neuralnet")
library(caret)
library(caTools)
library(ROCR)
library(class)
library(MASS)
library(e1071)
library(rpart)
library(rpart.plot)
library(party)
library(kernlab)
library(neuralnet)
set.seed(0305)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
nb <- naiveBayes(CKD~., data=training,laplace=1)
nb
predVector<-predict(nb, newdata=testing)
confusionMatrix(predVector, testing$CKD, positive="No")
print("Naive Bayes results:")
print("Accuracy: 86%")
print("Sensitivity: 87%")
print("Specificity: 62%")
TestDataNB <- TestDataFactored
TestDataNB$CKD <- predict(nb, newdata=TestDataNB)
write.csv(TestDataNB, file = "NaiveBayes.csv", row.names = F, quote = F)
w1<-read.csv(file="NaiveBayes.csv",head=TRUE)
matplot(w1[, 1], w1[, -1], type="h",xlab="all attributes",ylab="CKD",main="distribution of Naive bayes set")
TestDataNB <- NULL
shiny::runApp()
runApp()
set.seed(0305)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
nb <- naiveBayes(CKD~., data=training,laplace=1)
nb
predVector<-predict(nb, newdata=testing)
confusionMatrix(predVector, testing$CKD, positive="No")
print("Naive Bayes results:")
print("Accuracy: 86%")
print("Sensitivity: 87%")
print("Specificity: 62%")
TestDataNB <- TestDataFactored
TestDataNB$CKD <- predict(nb, newdata=TestDataNB)
write.csv(TestDataNB, file = "NaiveBayes.csv", row.names = F, quote = F)
w1<-read.csv(file="NaiveBayes.csv",head=TRUE)
matplot(w1[, 1], w1[, -1], type="h",xlab="all attributes",ylab="CKD",main="distribution of Naive bayes set")
TestDataNB <- NULL
runApp()
?plot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
set.seed(0305)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
nb <- naiveBayes(CKD~., data=training,laplace=1)
nb
predVector<-predict(nb, newdata=testing)
confusionMatrix(predVector, testing$CKD, positive="No")
print("Naive Bayes results:")
print("Accuracy: 86%")
print("Sensitivity: 87%")
print("Specificity: 62%")
TestDataNB <- TestDataFactored
TestDataNB$CKD <- predict(nb, newdata=TestDataNB)
write.csv(TestDataNB, file = "NaiveBayes.csv", row.names = F, quote = F)
w1<-read.csv(file="NaiveBayes.csv",head=TRUE)
matplot(w1[, 1], w1[, -1], type="h",xlab="all attributes",ylab="CKD",main="distribution of Naive bayes set")
TestDataNB <- NULL
runApp()
runApp()
runApp()
install.packages("caret")
install.packages("caret")
install.packages("caTools")
install.packages("caTools")
install.packages("ROCR")
install.packages("ROCR")
install.packages("class")
install.packages("MASS")
install.packages("MASS")
install.packages("e1071")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("party")
install.packages("kernlab")
install.packages("neuralnet")
install.packages("neuralnet")
library(caret)
library(caTools)
library(ROCR)
library(class)
library(MASS)
library(e1071)
library(rpart)
library(rpart.plot)
library(party)
library(kernlab)
library(neuralnet)
set.seed(0305)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
nb <- naiveBayes(CKD~., data=training,laplace=1)
nb
predVector<-predict(nb, newdata=testing)
confusionMatrix(predVector, testing$CKD, positive="No")
print("Naive Bayes results:")
print("Accuracy: 86%")
print("Sensitivity: 87%")
print("Specificity: 62%")
TestDataNB <- TestDataFactored
TestDataNB$CKD <- predict(nb, newdata=TestDataNB)
write.csv(TestDataNB, file = "NaiveBayes.csv", row.names = F, quote = F)
w1<-read.csv(file="NaiveBayes.csv",head=TRUE)
matplot(w1[, 1], w1[, -1], type="h",xlab="all attributes",ylab="CKD",main="distribution of Naive bayes set")
TestDataNB <- NULL
set.seed(0305)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
##LINEAR KERNEL
obj_linear <- tune(svm, CKD~., data = training,tunecontrol = tune.control(sampling = "cross"))
obj_linear$best.parameters
obj_linear <- tune(svm, CKD~., data = training,tunecontrol = tune.control(sampling = "cross"))
obj_linear
SVM_linear <- svm(CKD~., data = training, kernel = "linear", gamma = 0.02564103, cost = 1)
SVM_linear <- svm(CKD~., data = training, kernel = "linear", gamma = 0.02564103, cost = 1)
svm.model=svm(CKD~.,data=training)
predVector1 <- predict(SVM_linear, newdata = testing)
table1 <- table(predVector1, testing$CKD)
confusionMatrix(table1, positive = "No")
print("Support Vector Machines (linear) results:")
print("Accuracy: 93.6%")
print("Sensitivity: 100%")
print("Specificity: 0%")
TestDataSVMLinear <- TestDataFactored
TestDataSVMLinear$CKD <- predict(SVM_linear, newdata = TestDataSVMLinear)
write.csv(TestDataSVMLinear, file = "SVM_Linear.csv", row.names = F, quote = F)
##RADIAL KERNEL
obj_radial <- best.tune(svm, CKD~., data = training, kernel = "radial")
obj_radial
SVM_radial <- svm(CKD~., data = training, kernel = "radial", gamma = 0.02564103, cost = 1)
predVector2 <- predict(SVM_radial, newdata = testing)
table2 <- table(predVector1, testing$CKD)
confusionMatrix(table2, positive = "No")
print("Support Vector Machines (radial) results:")
print("Accuracy: 93.6%")
print("Sensitivity: 100%")
print("Specificity: 0%")
TestDataSVMRadial <- TestDataFactored
TestDataSVMRadial$CKD <- predict(SVM_radial, newdata = TestDataSVMRadial)
write.csv(TestDataSVMRadial, file = "SVM_Radial.csv", row.names = F, quote = F)
##POLYNOMIAL KERNEL
obj_polynomial <- best.tune(svm, CKD~., data = training, kernel = "polynomial")
obj_polynomial
SVM_polynomial <- svm(CKD~., data = training, kernel = "polynomial", gamma = 0.02564103, cost = 1, degree = 3, coef.0 = 0)
predVector3 <- predict(SVM_polynomial, newdata = testing)
table3 <- table(predVector3, testing$CKD)
confusionMatrix(table3, positive = "No")
print("Support Vector Machines (polynomial) results:")
print("Accuracy: 93.6%")
print("Sensitivity: 100%")
print("Specificity: 0%")
TestDataSVMPolynomial <- TestDataFactored
TestDataSVMPolynomial$CKD <- predict(SVM_polynomial, newdata = TestDataSVMPolynomial)
write.csv(TestDataSVMPolynomial, file = "SVM_Polynomial.csv", row.names = F, quote = F)
##SIGMOID KERNEL
obj_sigmoid <- best.tune(svm, CKD~., data = training, kernel = "sigmoid")
obj_sigmoid
SVM_sigmoid <- svm(CKD~., data = training, kernel = "sigmoid", gamma = 0.02564103, cost = 1, coef.0 = 0)
predVector4 <- predict(SVM_sigmoid, newdata = testing)
table4 <- table(predVector4, testing$CKD)
confusionMatrix(table4, positive = "No")
print("Support Vector Machines (sigmoid) results:")
print("Accuracy: 91.5%")
print("Sensitivity: 97.1%")
print("Specificity: 10.6%")
TestDataSVMSigmoid <- TestDataFactored
TestDataSVMSigmoid$CKD <- predict(SVM_sigmoid, newdata = TestDataSVMSigmoid)
write.csv(TestDataSVMSigmoid, file = "SVM_Sigmoid.csv", row.names = F, quote = F)
set.seed(0305)
ModelDataNum <- as.data.frame(sapply(ModelDataFactored, as.numeric))
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataNum[index,]
testing <- ModelDataNum[-index,]
n <- names(training)
names <- paste(n[1:32], collapse = ' + ')
f <- paste("CKD ~ ", names)
nn <- neuralnet(f, training, hidden = 2, threshold = 0.03, stepmax = 5e+07, learningrate = 0.05, lifesign = "full")
plot(nn)
nn.results <- compute(nn, testing[-33])
predVector <- (nn.results$net.result < 1.5)
table <- table(Predicted = (predVector), Actual = (testing$CKD == 1))
table
print("Neural Network results:")
print("Sensitivity: 100%")
print("Specificity: 0%")
TestDataNN <- TestDataFactored
TestDataNN <- as.data.frame(sapply(TestDataNN, as.numeric))
nn.predNew <- compute(nn, TestDataNN)
TestDataNN <- round(nn.predNew$net.result)
write.csv(TestDataNN, file = "NeuralNet.csv", row.names = T, quote = F)
TestDataNN <- NULL
testing <- NULL
training <- NULL
nn <- neuralnet(f, training, hidden = 2, threshold = 0.03, stepmax = 5e+07, learningrate = 0.05, lifesign = "full")
plot(nn)
shiny::runApp()
runApp()
